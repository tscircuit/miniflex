<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <polyline data-points="0,0 200,0 200,100 0,100 0,0" data-type="line" data-label="" points="40,460 600,460 600,180 40,180 40,460" fill="none" stroke="black" stroke-width="2.8" />
  </g>
  <g>
    <rect data-type="rect" data-label="_$$0" data-x="50" data-y="50" x="40" y="180" width="280" height="280" fill="rgba(0,0,0,0.1)" stroke="black" stroke-width="0.35714285714285715" /><text x="45" y="175" font-family="sans-serif" font-size="12" fill="black">_$$0</text>
  </g>
  <g>
    <rect data-type="rect" data-label="_$$1" data-x="150" data-y="50" x="320" y="180" width="280" height="280" fill="rgba(255,0,0,0.1)" stroke="black" stroke-width="0.35714285714285715" /><text x="325" y="175" font-family="sans-serif" font-size="12" fill="black">_$$1</text>
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 2.8,
        "c": 0,
        "e": 40,
        "b": 0,
        "d": -2.8,
        "f": 460
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>